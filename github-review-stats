#!/usr/bin/env python

import argparse
import collections
import datetime
import json


def date_floor(dt):
    return dt.replace(hour=0, minute=0, second=0)


def build_review_statistics(pull_requests_file, reviews_directory):
    days_to_first_review = collections.defaultdict(lambda: 0)

    with open(pull_requests_file, 'r') as pr_file:
        prs = json.load(pr_file)

        for pr in prs:
            pull_number = pr['number']

            try:
                with open(
                    f"{reviews_directory}/{pull_number}.json",
                    'r',
                ) as review_file:
                    reviews = json.load(review_file)

                    if len(reviews) < 1:
                        continue

                    pr_created_at = date_floor(
                        datetime.datetime.fromisoformat(pr['created_at']))
                    review_submitted_at = date_floor(
                        datetime.datetime.fromisoformat(
                            reviews[0]['submitted_at'],
                        ))

                    time_until_first_review = review_submitted_at - pr_created_at

                    days_to_first_review[time_until_first_review.days] += 1
            except FileNotFoundError:
                break

    return days_to_first_review


def plot_graph(days_to_first_review):
    import matplotlib.pyplot

    figure, axes = matplotlib.pyplot.subplots()
    axes.bar(days_to_first_review.keys(), days_to_first_review.values())

    matplotlib.pyplot.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='',
    )

    parser.add_argument('pull_requests_file')
    parser.add_argument('reviews_directory')

    args = parser.parse_args()

    days_to_first_review = build_review_statistics(
        args.pull_requests_file,
        args.reviews_directory,
    )
    plot_graph(days_to_first_review)
