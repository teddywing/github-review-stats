#!/usr/bin/env python

# Copyright (c) 2024  Teddy Wing
#
# This file is part of github-review-stats.
#
# github-review-stats is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# github-review-stats is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with github-review-stats. If not, see
# <https://www.gnu.org/licenses/>.


import argparse
import datetime
import json

import requests


def github_request(token, endpoint, params={}):
    req = requests.get(
        f"https://api.github.com{endpoint}",
        headers={
            'Accept': 'application/vnd.github+json',
            'X-GitHub-Api-Version': '2022-11-28',
            'Authorization': f"Bearer {token}",
        },
        params=params,
    )

    return req


def fetch_pull_requests(token, owner_repo, since):
    since_date = datetime.datetime.fromisoformat(since)
    since_date = since_date.replace(tzinfo=datetime.timezone.utc)
    collected_prs = []

    page = 1
    while True:
        resp = github_request(
            token,
            f"/repos/{owner_repo}/pulls",
            params={
                'state': 'closed',
                'sort': 'created',
                'direction': 'desc',
                'per_page': 100,
                'page': page,
            }
        )

        prs = resp.json()
        collected_prs = collected_prs + prs

        last_pr_created_at = datetime.datetime.fromisoformat(prs[0]['created_at'])

        # If last_pr_created_at is older than since_date.
        if last_pr_created_at <= since_date:
            break

        page += 1

    collected_prs_json = json.dumps(collected_prs)

    output_filename = owner_repo.split('/')[-1]
    with open(f"{output_filename}.json", 'w') as f:
        print(collected_prs_json, file=f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Fetch GitHub pull requests for a repository',
    )
    parser.add_argument(
        '--token',
        required=True,
        help='GitHub token',
    )
    parser.add_argument(
        '--since',
        required=True,
        help='Fetch pull requests since date ("1970-01-01")',
    )
    parser.add_argument('owner_repo')

    args = parser.parse_args()

    fetch_pull_requests(args.token, args.owner_repo, args.since)
