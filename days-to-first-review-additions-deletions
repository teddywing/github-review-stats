#!/usr/bin/env python

import argparse
import datetime
import collections
import json


def date_floor(dt):
    return dt.replace(hour=0, minute=0, second=0)


def build_additions_deletions_statistics(
    pull_requests_file,
    reviews_directory,
    additions_deletions_directory,
):
    stats = {}

    with open(pull_requests_file, 'r') as pr_file:
        prs = json.load(pr_file)

        for pr in prs:
            pull_number = pr['number']

            try:
                with open(
                    f"{reviews_directory}/{pull_number}.json",
                    'r',
                ) as review_file:
                    reviews = json.load(review_file)

                    if len(reviews) < 1:
                        continue

                    pr_created_at = date_floor(
                        datetime.datetime.fromisoformat(pr['created_at']))
                    review_submitted_at = date_floor(
                        datetime.datetime.fromisoformat(
                            reviews[0]['submitted_at'],
                        ))

                    time_until_first_review = review_submitted_at - pr_created_at

                    stats[pull_number] = {'days': time_until_first_review.days}

                with open(
                    f"{additions_deletions_directory}/{pull_number}.json",
                    'r',
                ) as additions_deletions_file:
                    additions_deletions = \
                        json.load(additions_deletions_file)

                    stats[pull_number].update(additions_deletions)
            except FileNotFoundError:
                break

    return stats


def plot_graph(pull_requests_file, additions_deletions_stats):
    import matplotlib.pyplot

    graph_title = pull_requests_file.replace('.json', '')

    figure, axes = matplotlib.pyplot.subplots()

    num_days = [additions_deletions_stats[pr]['days'] \
        for pr in additions_deletions_stats]
    additions = [additions_deletions_stats[pr]['additions'] \
        for pr in additions_deletions_stats]
    deletions = [additions_deletions_stats[pr]['deletions'] \
        for pr in additions_deletions_stats]
    additions_minus_deletions = [
        additions_deletions_stats[pr]['additions'] \
            - additions_deletions_stats[pr]['deletions'] \
        for pr in additions_deletions_stats]
    axes.scatter(num_days, additions_minus_deletions)

    axes.set_title(graph_title)
    axes.set_xlabel('Days until first review')
    axes.set_ylabel('Additions')

    # matplotlib.pyplot.savefig(f"{graph_title}.png", format='png')
    matplotlib.pyplot.show()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='',
    )

    parser.add_argument('pull_requests_file')
    parser.add_argument('reviews_directory')
    parser.add_argument('additions_deletions_directory')

    args = parser.parse_args()

    additions_deletions_stats = build_additions_deletions_statistics(
        args.pull_requests_file,
        args.reviews_directory,
        args.additions_deletions_directory,
    )
    plot_graph(args.pull_requests_file, additions_deletions_stats)
